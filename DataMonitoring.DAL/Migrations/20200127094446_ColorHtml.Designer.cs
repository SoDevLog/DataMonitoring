// <auto-generated />
using System;
using DataMonitoring.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataMonitoring.DAL.Migrations
{
    [DbContext(typeof(DataMonitoringDbContext))]
    [Migration("20200127094446_ColorHtml")]
    partial class ColorHtml
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataMonitoring.Model.BarLabelWidget", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("IndicatorBarWidgetId");

                    b.Property<string>("LabelTextColor")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<int>("Sequence");

                    b.Property<bool>("UseLabelColorForBar");

                    b.HasKey("Id");

                    b.HasIndex("IndicatorBarWidgetId");

                    b.ToTable("BarLabelWidget");
                });

            modelBuilder.Entity("DataMonitoring.Model.BarLabelWidgetLocalization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("BarLabelWidgetId");

                    b.Property<string>("LocalizationCode")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.HasKey("Id");

                    b.HasIndex("BarLabelWidgetId");

                    b.ToTable("BarLabelWidgetLocalization");
                });

            modelBuilder.Entity("DataMonitoring.Model.ColorHtml", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BgClassName")
                        .HasMaxLength(100);

                    b.Property<string>("HexColorCode")
                        .HasMaxLength(7);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<string>("TxtClassName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ColorClasses");
                });

            modelBuilder.Entity("DataMonitoring.Model.Connector", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Name");

                    b.Property<string>("TimeZone");

                    b.HasKey("Id");

                    b.ToTable("Connectors");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Connector");
                });

            modelBuilder.Entity("DataMonitoring.Model.Dashboard", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CurrentTimeManagementDisplayed");

                    b.Property<string>("Title");

                    b.Property<string>("TitleColorName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("TitleDisplayed");

                    b.Property<string>("Version");

                    b.HasKey("Id");

                    b.ToTable("Dashboards");
                });

            modelBuilder.Entity("DataMonitoring.Model.DashboardLocalization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("DashboardId");

                    b.Property<string>("LocalizationCode")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("DashboardId");

                    b.ToTable("DashboardLocalizations");
                });

            modelBuilder.Entity("DataMonitoring.Model.DashboardWidget", b =>
                {
                    b.Property<long>("DashboardId");

                    b.Property<long>("WidgetId");

                    b.Property<int>("Column");

                    b.Property<int>("Position");

                    b.HasKey("DashboardId", "WidgetId");

                    b.HasIndex("WidgetId");

                    b.ToTable("DashboardWidgets");
                });

            modelBuilder.Entity("DataMonitoring.Model.IndicatorBarWidgetColumn", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasMaxLength(60);

                    b.Property<bool>("Filtered");

                    b.Property<string>("FilteredValue")
                        .HasMaxLength(60);

                    b.Property<long>("IndicatorBarWidgetId");

                    b.Property<bool>("IsNumericFormat");

                    b.HasKey("Id");

                    b.HasIndex("IndicatorBarWidgetId");

                    b.ToTable("IndicatorBarWidgetColumn");
                });

            modelBuilder.Entity("DataMonitoring.Model.IndicatorDefinition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DelayForDelete");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<DateTime?>("LastRefreshUtc");

                    b.Property<int>("RefreshTime");

                    b.Property<long?>("TimeManagementId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("TimeManagementId");

                    b.ToTable("IndicatorDefinitions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IndicatorDefinition");
                });

            modelBuilder.Entity("DataMonitoring.Model.IndicatorLocalization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("IndicatorDefinitionId");

                    b.Property<string>("LocalizationCode")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("IndicatorDefinitionId");

                    b.ToTable("IndicatorLocalizations");
                });

            modelBuilder.Entity("DataMonitoring.Model.IndicatorQuery", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ConnectorId");

                    b.Property<long>("IndicatorDefinitionId");

                    b.Property<string>("Query");

                    b.HasKey("Id");

                    b.HasIndex("ConnectorId");

                    b.HasIndex("IndicatorDefinitionId");

                    b.ToTable("IndicatorQueries");
                });

            modelBuilder.Entity("DataMonitoring.Model.IndicatorValue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateUtc");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<long>("IndicatorDefinitionId");

                    b.HasKey("Id");

                    b.HasIndex("IndicatorDefinitionId", "DateUtc");

                    b.ToTable("IndicatorValues");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IndicatorValue");
                });

            modelBuilder.Entity("DataMonitoring.Model.IndicatorWidget", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<long>("IndicatorDefinitionId");

                    b.Property<decimal?>("TargetValue")
                        .HasColumnType("decimal(10,4)");

                    b.Property<string>("TitleIndicatorColor")
                        .HasMaxLength(50);

                    b.Property<bool>("TitleIndicatorDisplayed");

                    b.Property<long>("WidgetId");

                    b.HasKey("Id");

                    b.HasIndex("IndicatorDefinitionId");

                    b.HasIndex("WidgetId");

                    b.ToTable("IndicatorWidgets");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IndicatorWidget");
                });

            modelBuilder.Entity("DataMonitoring.Model.SharedDashboard", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CodeLangue");

                    b.Property<long>("DashboardId");

                    b.Property<bool>("IsTestMode");

                    b.Property<string>("Key");

                    b.Property<string>("Message");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("Skin");

                    b.Property<string>("TimeZone");

                    b.HasKey("Id");

                    b.HasIndex("DashboardId");

                    b.ToTable("SharedDashboards");
                });

            modelBuilder.Entity("DataMonitoring.Model.SlipperyTime", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("TimeBack");

                    b.Property<long>("TimeManagementId");

                    b.Property<int>("UnitOfTime");

                    b.HasKey("Id");

                    b.HasIndex("TimeManagementId")
                        .IsUnique();

                    b.ToTable("SlipperyTimes");
                });

            modelBuilder.Entity("DataMonitoring.Model.Style", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.HasKey("Id");

                    b.ToTable("Styles");
                });

            modelBuilder.Entity("DataMonitoring.Model.TableWidgetColumn", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AlignStyle");

                    b.Property<bool>("BoldBody");

                    b.Property<bool>("BoldHeader");

                    b.Property<string>("CellStyleWhenEqualValue1")
                        .HasMaxLength(100);

                    b.Property<string>("CellStyleWhenEqualValue2")
                        .HasMaxLength(100);

                    b.Property<string>("CellStyleWhenEqualValue3")
                        .HasMaxLength(100);

                    b.Property<string>("CellStyleWhenHigherValue")
                        .HasMaxLength(100);

                    b.Property<string>("CellStyleWhenLowerValue")
                        .HasMaxLength(100);

                    b.Property<string>("Code")
                        .HasMaxLength(60);

                    b.Property<int>("ColumnStyle");

                    b.Property<string>("DecimalMask");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<bool>("Displayed");

                    b.Property<string>("EqualsColumnCode1")
                        .HasMaxLength(60);

                    b.Property<string>("EqualsColumnCode2")
                        .HasMaxLength(60);

                    b.Property<string>("EqualsColumnCode3")
                        .HasMaxLength(60);

                    b.Property<string>("EqualsValue1")
                        .HasMaxLength(60);

                    b.Property<string>("EqualsValue2")
                        .HasMaxLength(60);

                    b.Property<string>("EqualsValue3")
                        .HasMaxLength(60);

                    b.Property<string>("HigherColumnCode")
                        .HasMaxLength(60);

                    b.Property<string>("HigherValue")
                        .HasMaxLength(60);

                    b.Property<long>("IndicatorTableWidgetId");

                    b.Property<string>("LowerColumnCode")
                        .HasMaxLength(60);

                    b.Property<string>("LowerValue")
                        .HasMaxLength(60);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<bool>("NameDisplayed");

                    b.Property<int>("Sequence");

                    b.Property<string>("TextBodyColor")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("TextHeaderColor")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("IndicatorTableWidgetId");

                    b.ToTable("TableWidgetColumns");

                    b.HasDiscriminator<string>("Discriminator").HasValue("TableWidgetColumn");
                });

            modelBuilder.Entity("DataMonitoring.Model.TableWidgetColumnLocalization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LocalizationCode")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<long>("TableWidgetColumnId");

                    b.HasKey("Id");

                    b.HasIndex("TableWidgetColumnId");

                    b.ToTable("TableWidgetColumnLocalizations");
                });

            modelBuilder.Entity("DataMonitoring.Model.TargetIndicatorChartWidget", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EndDateUtc");

                    b.Property<decimal>("EndTargetValue")
                        .HasColumnType("decimal(10,4)");

                    b.Property<long>("IndicatorChartWidgetId");

                    b.Property<DateTime>("StartDateUtc");

                    b.Property<decimal>("StartTargetValue")
                        .HasColumnType("decimal(10,4)");

                    b.HasKey("Id");

                    b.HasIndex("IndicatorChartWidgetId");

                    b.ToTable("TargetIndicatorChartWidgets");
                });

            modelBuilder.Entity("DataMonitoring.Model.TimeManagement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("TimeManagements");
                });

            modelBuilder.Entity("DataMonitoring.Model.TimeRange", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("EndTimeUtc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("StartTimeUtc");

                    b.Property<long>("TimeManagementId");

                    b.HasKey("Id");

                    b.HasIndex("TimeManagementId");

                    b.ToTable("TimeRanges");
                });

            modelBuilder.Entity("DataMonitoring.Model.Widget", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CurrentTimeManagementDisplayed");

                    b.Property<bool>("LastRefreshTimeIndicator");

                    b.Property<int>("RefreshTime");

                    b.Property<long?>("TimeManagementId");

                    b.Property<string>("Title")
                        .HasMaxLength(200);

                    b.Property<string>("TitleColorName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("TitleDisplayed");

                    b.Property<int>("TitleFontSize");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("TimeManagementId");

                    b.ToTable("Widgets");
                });

            modelBuilder.Entity("DataMonitoring.Model.WidgetLocalization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LocalizationCode")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<long>("WidgetId");

                    b.HasKey("Id");

                    b.HasIndex("WidgetId");

                    b.ToTable("WidgetLocalizations");
                });

            modelBuilder.Entity("DataMonitoring.Model.ApiConnector", b =>
                {
                    b.HasBaseType("DataMonitoring.Model.Connector");

                    b.Property<string>("AcceptHeader")
                        .HasMaxLength(50);

                    b.Property<string>("AccessTokenUrl")
                        .HasMaxLength(100);

                    b.Property<int>("AutorisationType");

                    b.Property<string>("BaseUrl")
                        .HasMaxLength(100);

                    b.Property<string>("ClientId")
                        .HasMaxLength(100);

                    b.Property<string>("ClientSecret")
                        .HasMaxLength(100);

                    b.Property<int?>("GrantType");

                    b.Property<string>("HttpMethod")
                        .HasMaxLength(10);

                    b.HasDiscriminator().HasValue("ApiConnector");
                });

            modelBuilder.Entity("DataMonitoring.Model.SqLiteConnector", b =>
                {
                    b.HasBaseType("DataMonitoring.Model.Connector");

                    b.Property<string>("DatabaseName")
                        .HasMaxLength(30);

                    b.Property<string>("HostName")
                        .HasMaxLength(30);

                    b.Property<string>("Password")
                        .HasMaxLength(30);

                    b.Property<bool>("UseIntegratedSecurity");

                    b.Property<string>("UserName")
                        .HasMaxLength(30);

                    b.HasDiscriminator().HasValue("SqLiteConnector");
                });

            modelBuilder.Entity("DataMonitoring.Model.SqlServerConnector", b =>
                {
                    b.HasBaseType("DataMonitoring.Model.Connector");

                    b.Property<string>("DatabaseName")
                        .HasColumnName("SqlServerConnector_DatabaseName")
                        .HasMaxLength(30);

                    b.Property<string>("HostName")
                        .HasColumnName("SqlServerConnector_HostName")
                        .HasMaxLength(30);

                    b.Property<string>("Password")
                        .HasColumnName("SqlServerConnector_Password")
                        .HasMaxLength(30);

                    b.Property<bool>("UseIntegratedSecurity")
                        .HasColumnName("SqlServerConnector_UseIntegratedSecurity");

                    b.Property<string>("UserName")
                        .HasColumnName("SqlServerConnector_UserName")
                        .HasMaxLength(30);

                    b.HasDiscriminator().HasValue("SqlServerConnector");
                });

            modelBuilder.Entity("DataMonitoring.Model.IndicatorCalculated", b =>
                {
                    b.HasBaseType("DataMonitoring.Model.IndicatorDefinition");

                    b.Property<long>("IndicatorDefinitionId1");

                    b.Property<long>("IndicatorDefinitionId2");

                    b.HasIndex("IndicatorDefinitionId1");

                    b.HasIndex("IndicatorDefinitionId2");

                    b.HasDiscriminator().HasValue("IndicatorCalculated");
                });

            modelBuilder.Entity("DataMonitoring.Model.FlowIndicatorValue", b =>
                {
                    b.HasBaseType("DataMonitoring.Model.IndicatorValue");

                    b.Property<decimal?>("ChartValue")
                        .HasColumnType("decimal(10,4)");

                    b.Property<string>("Group1");

                    b.Property<string>("Group2");

                    b.Property<string>("Group3");

                    b.Property<string>("Group4");

                    b.Property<string>("Group5");

                    b.HasDiscriminator().HasValue("FlowIndicatorValue");
                });

            modelBuilder.Entity("DataMonitoring.Model.SnapshotIndicatorValue", b =>
                {
                    b.HasBaseType("DataMonitoring.Model.IndicatorValue");

                    b.Property<string>("TableValue");

                    b.HasDiscriminator().HasValue("SnapshotIndicatorValue");
                });

            modelBuilder.Entity("DataMonitoring.Model.IndicatorBarWidget", b =>
                {
                    b.HasBaseType("DataMonitoring.Model.IndicatorWidget");

                    b.Property<bool>("AddBarStackedToTarget");

                    b.Property<bool>("AddTargetBar");

                    b.Property<string>("BarColor")
                        .HasMaxLength(50);

                    b.Property<string>("BarColorStackedToTarget")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<string>("DataColumnCode")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<string>("DataLabelInBarColor")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("DecimalMask")
                        .HasMaxLength(60);

                    b.Property<bool>("DisplayAxeX");

                    b.Property<bool>("DisplayAxeY");

                    b.Property<bool>("DisplayDataAxeY");

                    b.Property<bool>("DisplayDataLabelInBar");

                    b.Property<bool>("DisplayGridLinesAxeY");

                    b.Property<int>("FontSizeDataLabel");

                    b.Property<string>("LabelColorText")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LabelColumnCode")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<int>("LabelFontSize");

                    b.Property<bool>("SetSumDataToTarget");

                    b.Property<string>("TargetBarColor")
                        .HasMaxLength(50);

                    b.Property<string>("TextDataAxeYColor")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasDiscriminator().HasValue("IndicatorBarWidget");
                });

            modelBuilder.Entity("DataMonitoring.Model.IndicatorChartWidget", b =>
                {
                    b.HasBaseType("DataMonitoring.Model.IndicatorWidget");

                    b.Property<int>("AxeFontSize");

                    b.Property<string>("AxeXColor")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("AxeXDisplayed");

                    b.Property<string>("AxeYColor")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("AxeYDataDisplayed");

                    b.Property<bool>("AxeYDisplayed");

                    b.Property<bool>("AxeYIsAutoAdjustableAccordingMinValue");

                    b.Property<int?>("AxeYOffsetFromMinValue");

                    b.Property<string>("ChartAverageColor")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("ChartAverageDisplayed");

                    b.Property<string>("ChartDataColor")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("ChartDataFill");

                    b.Property<string>("ChartTargetColor")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("ChartTargetDisplayed");

                    b.Property<string>("DecimalMask")
                        .HasColumnName("IndicatorChartWidget_DecimalMask")
                        .HasMaxLength(60);

                    b.Property<string>("Group1");

                    b.Property<string>("Group2");

                    b.Property<string>("Group3");

                    b.Property<string>("Group4");

                    b.Property<string>("Group5");

                    b.HasDiscriminator().HasValue("IndicatorChartWidget");
                });

            modelBuilder.Entity("DataMonitoring.Model.IndicatorGaugeWidget", b =>
                {
                    b.HasBaseType("DataMonitoring.Model.IndicatorWidget");

                    b.Property<string>("GaugeRange1Color")
                        .HasMaxLength(50);

                    b.Property<decimal?>("GaugeRange1MaxValue");

                    b.Property<decimal?>("GaugeRange1MinValue");

                    b.Property<string>("GaugeRange2Color")
                        .HasMaxLength(50);

                    b.Property<bool?>("GaugeRange2Displayed");

                    b.Property<decimal?>("GaugeRange2MaxValue");

                    b.Property<decimal?>("GaugeRange2MinValue");

                    b.Property<string>("GaugeRange3Color")
                        .HasMaxLength(50);

                    b.Property<bool?>("GaugeRange3Displayed");

                    b.Property<decimal?>("GaugeRange3MaxValue");

                    b.Property<decimal?>("GaugeRange3MinValue");

                    b.Property<string>("GaugeTargetColor")
                        .HasMaxLength(50);

                    b.Property<string>("Group1")
                        .HasColumnName("IndicatorGaugeWidget_Group1");

                    b.Property<string>("Group2")
                        .HasColumnName("IndicatorGaugeWidget_Group2");

                    b.Property<string>("Group3")
                        .HasColumnName("IndicatorGaugeWidget_Group3");

                    b.Property<string>("Group4")
                        .HasColumnName("IndicatorGaugeWidget_Group4");

                    b.Property<string>("Group5")
                        .HasColumnName("IndicatorGaugeWidget_Group5");

                    b.Property<bool>("TargetDisplayed");

                    b.HasDiscriminator().HasValue("IndicatorGaugeWidget");
                });

            modelBuilder.Entity("DataMonitoring.Model.IndicatorTableWidget", b =>
                {
                    b.HasBaseType("DataMonitoring.Model.IndicatorWidget");

                    b.Property<string>("ColumnCode")
                        .HasMaxLength(60);

                    b.Property<string>("EqualsValue")
                        .HasMaxLength(60);

                    b.Property<bool>("HeaderDisplayed");

                    b.Property<string>("RowStyleWhenEqualValue")
                        .HasMaxLength(100);

                    b.Property<int>("Sequence");

                    b.HasDiscriminator().HasValue("IndicatorTableWidget");
                });

            modelBuilder.Entity("DataMonitoring.Model.CalculatedTableWidgetColumn", b =>
                {
                    b.HasBaseType("DataMonitoring.Model.TableWidgetColumn");

                    b.Property<string>("PartialValueColumn");

                    b.Property<string>("TotalValueColumn");

                    b.HasDiscriminator().HasValue("CalculatedTableWidgetColumn");
                });

            modelBuilder.Entity("DataMonitoring.Model.IndicatorTableWidgetColumn", b =>
                {
                    b.HasBaseType("DataMonitoring.Model.TableWidgetColumn");

                    b.Property<bool>("Filtered");

                    b.Property<string>("FilteredValue")
                        .HasMaxLength(60);

                    b.Property<bool>("IsNumericFormat");

                    b.Property<bool>("TranspositionColumn");

                    b.Property<bool>("TranspositionRow");

                    b.Property<bool>("TranspositionValue");

                    b.HasDiscriminator().HasValue("IndicatorTableWidgetColumn");
                });

            modelBuilder.Entity("DataMonitoring.Model.MaskTableWidgetColumn", b =>
                {
                    b.HasBaseType("DataMonitoring.Model.TableWidgetColumn");

                    b.Property<string>("DisplayModel");

                    b.HasDiscriminator().HasValue("MaskTableWidgetColumn");
                });

            modelBuilder.Entity("DataMonitoring.Model.TargetTableWidgetColumn", b =>
                {
                    b.HasBaseType("DataMonitoring.Model.TableWidgetColumn");

                    b.HasDiscriminator().HasValue("TargetTableWidgetColumn");
                });

            modelBuilder.Entity("DataMonitoring.Model.TitleIndicatorTableWidgetColumn", b =>
                {
                    b.HasBaseType("DataMonitoring.Model.TableWidgetColumn");

                    b.HasDiscriminator().HasValue("TitleIndicatorTableWidgetColumn");
                });

            modelBuilder.Entity("DataMonitoring.Model.TranspositionColumnTableWidgetColumn", b =>
                {
                    b.HasBaseType("DataMonitoring.Model.TableWidgetColumn");

                    b.HasDiscriminator().HasValue("TranspositionColumnTableWidgetColumn");
                });

            modelBuilder.Entity("DataMonitoring.Model.BarLabelWidget", b =>
                {
                    b.HasOne("DataMonitoring.Model.IndicatorBarWidget", "IndicatorBarWidget")
                        .WithMany("BarLabelWidgets")
                        .HasForeignKey("IndicatorBarWidgetId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataMonitoring.Model.BarLabelWidgetLocalization", b =>
                {
                    b.HasOne("DataMonitoring.Model.BarLabelWidget", "BarLabelWidget")
                        .WithMany("BarLabelWidgetLocalizations")
                        .HasForeignKey("BarLabelWidgetId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataMonitoring.Model.DashboardLocalization", b =>
                {
                    b.HasOne("DataMonitoring.Model.Dashboard", "Dashboard")
                        .WithMany("DashboardLocalizations")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataMonitoring.Model.DashboardWidget", b =>
                {
                    b.HasOne("DataMonitoring.Model.Dashboard", "Dashboard")
                        .WithMany("Widgets")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataMonitoring.Model.Widget", "Widget")
                        .WithMany("Dashboards")
                        .HasForeignKey("WidgetId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataMonitoring.Model.IndicatorBarWidgetColumn", b =>
                {
                    b.HasOne("DataMonitoring.Model.IndicatorBarWidget", "IndicatorBarWidget")
                        .WithMany("IndicatorBarWidgetColumns")
                        .HasForeignKey("IndicatorBarWidgetId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataMonitoring.Model.IndicatorDefinition", b =>
                {
                    b.HasOne("DataMonitoring.Model.TimeManagement", "TimeManagement")
                        .WithMany()
                        .HasForeignKey("TimeManagementId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataMonitoring.Model.IndicatorLocalization", b =>
                {
                    b.HasOne("DataMonitoring.Model.IndicatorDefinition", "Indicator")
                        .WithMany("IndicatorLocalizations")
                        .HasForeignKey("IndicatorDefinitionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataMonitoring.Model.IndicatorQuery", b =>
                {
                    b.HasOne("DataMonitoring.Model.Connector", "Connector")
                        .WithMany("IndicatorDefinitions")
                        .HasForeignKey("ConnectorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataMonitoring.Model.IndicatorDefinition", "IndicatorDefinition")
                        .WithMany("Queries")
                        .HasForeignKey("IndicatorDefinitionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataMonitoring.Model.IndicatorValue", b =>
                {
                    b.HasOne("DataMonitoring.Model.IndicatorDefinition", "IndicatorDefinition")
                        .WithMany("IndicatorValues")
                        .HasForeignKey("IndicatorDefinitionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataMonitoring.Model.IndicatorWidget", b =>
                {
                    b.HasOne("DataMonitoring.Model.IndicatorDefinition", "IndicatorDefinition")
                        .WithMany("Widgets")
                        .HasForeignKey("IndicatorDefinitionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataMonitoring.Model.Widget", "Widget")
                        .WithMany("Indicators")
                        .HasForeignKey("WidgetId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataMonitoring.Model.SharedDashboard", b =>
                {
                    b.HasOne("DataMonitoring.Model.Dashboard", "Dashboard")
                        .WithMany("SharedDashboards")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataMonitoring.Model.SlipperyTime", b =>
                {
                    b.HasOne("DataMonitoring.Model.TimeManagement", "TimeManagement")
                        .WithOne("SlipperyTime")
                        .HasForeignKey("DataMonitoring.Model.SlipperyTime", "TimeManagementId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataMonitoring.Model.TableWidgetColumn", b =>
                {
                    b.HasOne("DataMonitoring.Model.IndicatorTableWidget", "IndicatorTableWidget")
                        .WithMany("TableWidgetColumns")
                        .HasForeignKey("IndicatorTableWidgetId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataMonitoring.Model.TableWidgetColumnLocalization", b =>
                {
                    b.HasOne("DataMonitoring.Model.TableWidgetColumn", "TableWidgetColumn")
                        .WithMany("TableWidgetColumnLocalizations")
                        .HasForeignKey("TableWidgetColumnId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataMonitoring.Model.TargetIndicatorChartWidget", b =>
                {
                    b.HasOne("DataMonitoring.Model.IndicatorChartWidget", "IndicatorChartWidget")
                        .WithMany("TargetIndicatorChartWidgets")
                        .HasForeignKey("IndicatorChartWidgetId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataMonitoring.Model.TimeRange", b =>
                {
                    b.HasOne("DataMonitoring.Model.TimeManagement", "TimeManagement")
                        .WithMany("TimeRanges")
                        .HasForeignKey("TimeManagementId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataMonitoring.Model.Widget", b =>
                {
                    b.HasOne("DataMonitoring.Model.TimeManagement", "TimeManagement")
                        .WithMany()
                        .HasForeignKey("TimeManagementId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataMonitoring.Model.WidgetLocalization", b =>
                {
                    b.HasOne("DataMonitoring.Model.Widget", "Widget")
                        .WithMany("WidgetLocalizations")
                        .HasForeignKey("WidgetId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataMonitoring.Model.IndicatorCalculated", b =>
                {
                    b.HasOne("DataMonitoring.Model.IndicatorDefinition", "Indicator1")
                        .WithMany()
                        .HasForeignKey("IndicatorDefinitionId1")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataMonitoring.Model.IndicatorDefinition", "Indicator2")
                        .WithMany()
                        .HasForeignKey("IndicatorDefinitionId2")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
